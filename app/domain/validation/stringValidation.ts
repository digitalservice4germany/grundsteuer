import {
  ValidateFunctionDefault,
  ValidateMaxLengthFloatFunction,
  ValidateMaxLengthFunction,
  ValidateMinLengthFunction,
} from "~/domain/validation/ValidateFunction";

const SUPPORTED_CHARS = [
  "\n",
  "",
  " ",
  "!",
  '"',
  "#",
  "$",
  "%",
  "&",
  "'",
  "(",
  ")",
  "*",
  "+",
  ",",
  "-",
  ".",
  "/",
  "\\",
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  ":",
  ";",
  "<",
  "=",
  ">",
  "?",
  "@",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "[",
  "]",
  "^",
  "_",
  "`",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "{",
  "|",
  "}",
  "~",
  "¡",
  "¢",
  "£",
  "¥",
  "§",
  "ª",
  "«",
  "¬",
  "®",
  "¯",
  "°",
  "±",
  "²",
  "³",
  "µ",
  "¹",
  "º",
  "»",
  "¿",
  "À",
  "Á",
  "Â",
  "Ã",
  "Ä",
  "Å",
  "Æ",
  "Ç",
  "È",
  "É",
  "Ê",
  "Ë",
  "Ì",
  "Í",
  "Î",
  "Ï",
  "Ð",
  "Ñ",
  "Ò",
  "Ó",
  "Ô",
  "Õ",
  "Ö",
  "×",
  "Ø",
  "Ù",
  "Ú",
  "Û",
  "Ü",
  "Ý",
  "Þ",
  "ß",
  "à",
  "á",
  "â",
  "ã",
  "ä",
  "å",
  "æ",
  "ç",
  "è",
  "é",
  "ê",
  "ë",
  "ì",
  "í",
  "î",
  "ï",
  "ð",
  "ñ",
  "ò",
  "ó",
  "ô",
  "õ",
  "ö",
  "÷",
  "ø",
  "ù",
  "ú",
  "û",
  "ü",
  "ý",
  "þ",
  "ÿ",
  "Œ",
  "œ",
  "Š",
  "š",
  "Ÿ",
  "Ž",
  "ž",
  "€",
];
export const validateElsterChars: ValidateFunctionDefault = ({ value }) =>
  Array.from(value).every((char) => SUPPORTED_CHARS.includes(char));

export const validateMaxLengthFloat: ValidateMaxLengthFloatFunction = ({
  value,
  preComma,
  postComma,
}) => {
  if (!value) return true;
  const splitValues = value.trim().split(",");
  return (
    splitValues[0].length <= preComma &&
    (!splitValues[1] || splitValues[1].length <= postComma)
  );
};

export const validateMinLength: ValidateMinLengthFunction = ({
  value,
  minLength,
  exceptions,
}) => {
  if (!value) return true;
  const valueWithoutExceptions = removeAllExceptions(value, exceptions);
  return valueWithoutExceptions.trim().length >= minLength;
};

export const validateMaxLength: ValidateMaxLengthFunction = ({
  value,
  maxLength,
  exceptions,
}) => {
  if (!value) return true;
  const valueWithoutExceptions = removeAllExceptions(value, exceptions);
  return valueWithoutExceptions.trim().length <= maxLength;
};

const removeAllExceptions = (value: string, exceptions?: string[]) => {
  exceptions?.forEach((exception) => (value = value.split(exception).join("")));
  return value;
};
