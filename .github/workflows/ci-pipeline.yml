name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allow to run this workflow manually
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-app:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "16.13.0"
          cache: "npm"

      - run: npm install

      - name: Check build
        run: npm run build

      - name: Check format
        run: npm run format:check

      - name: Lint
        run: npm run lint:check

  build-push-image:
    needs: [build-app]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build an image from Dockerfile
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.IMAGE_NAME }}:${{ github.sha }}"
          format: "template"
          template: "@/contrib/sarif.tpl"
          output: "trivy-results.sarif"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: "trivy-results.sarif"

      - name: Login to container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  deploy-staging:
    needs: [build-push-image]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      DEPLOYMENT_NAME: web
      KUBECONFIG_PATH: /tmp/kubeconfig
      NAMESPACE: ${{ secrets.NAMESPACE_STAGING }}
    steps:
      - uses: actions/checkout@v2

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(<kubectl.sha256) kubectl" | sha256sum --check
          chmod +x kubectl
          mkdir -p ~/.local/bin/kubectl
          mv ./kubectl ~/.local/bin/kubectl
          export PATH="~/.local/bin/kubectl:$PATH"

      - name: Set kubeconfig
        run: |
          echo "Setup kubectl..."
          echo ${{ secrets.CI_KUBECONFIG_B64 }} | base64 --decode > $KUBE_CINFIG_PATH

      - name: Restart deployment
        run: |
          kubectl --namespace $NAMESPACE --kubeconfig $KUBE_CINFIG_PATH rollout restart deployment/$DEPLOYMENT_NAME
          kubectl --namespace $NAMESPACE --kubeconfig $KUBE_CINFIG_PATH rollout status deployment/$DEPLOYMENT_NAME
