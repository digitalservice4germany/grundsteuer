diff --git a/node_modules/@node-saml/node-saml/lib/algorithms.js b/node_modules/@node-saml/node-saml/lib/algorithms.js
index 5c1524f..b6c524c 100644
--- a/node_modules/@node-saml/node-saml/lib/algorithms.js
+++ b/node_modules/@node-saml/node-saml/lib/algorithms.js
@@ -5,7 +5,7 @@ const crypto = require("crypto");
 function getSigningAlgorithm(shortName) {
     switch (shortName) {
         case "sha256":
-            return "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256";
+            return "http://www.w3.org/2007/05/xmldsig-more#sha256-rsa-MGF1";
         case "sha512":
             return "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512";
         case "sha1":
diff --git a/node_modules/@node-saml/node-saml/lib/saml.js b/node_modules/@node-saml/node-saml/lib/saml.js
index 34e9829..40cd327 100644
--- a/node_modules/@node-saml/node-saml/lib/saml.js
+++ b/node_modules/@node-saml/node-saml/lib/saml.js
@@ -470,30 +470,7 @@ class SAML {
         Object.keys(additionalParameters).forEach((k) => {
             samlMessage[k] = additionalParameters[k] || "";
         });
-        const formInputs = Object.keys(samlMessage)
-            .map((k) => {
-            return '<input type="hidden" name="' + k + '" value="' + quoteattr(samlMessage[k]) + '" />';
-        })
-            .join("\r\n");
-        return [
-            "<!DOCTYPE html>",
-            "<html>",
-            "<head>",
-            '<meta charset="utf-8">',
-            '<meta http-equiv="x-ua-compatible" content="ie=edge">',
-            "</head>",
-            '<body onload="document.forms[0].submit()">',
-            "<noscript>",
-            "<p><strong>Note:</strong> Since your browser does not support JavaScript, you must press the button below once to proceed.</p>",
-            "</noscript>",
-            '<form method="post" action="' + encodeURI(this.options.entryPoint) + '">',
-            formInputs,
-            '<input type="submit" value="Submit" />',
-            "</form>",
-            '<script>document.forms[0].style.display="none";</script>',
-            "</body>",
-            "</html>",
-        ].join("\r\n");
+        return samlMessage["SAMLRequest"];
     }
     async getLogoutUrlAsync(user, RelayState, options) {
         const request = await this._generateLogoutRequest(user);
@@ -580,6 +557,10 @@ class SAML {
             doc = (0, xml_1.parseDomFromString)(xml);
             if (!Object.prototype.hasOwnProperty.call(doc, "documentElement"))
                 throw new Error("SAMLResponse is not valid base64-encoded XML");
+            const destinationNodes = xml_1.xpath.selectAttributes(doc, "/*[local-name()='Response']/@Destination");
+            if (!destinationNodes || destinationNodes.length !== 1 || destinationNodes[0].nodeValue !== this.getCallbackUrl()) {
+                throw new Error("Destination atribute does not match service provider URL.")
+            }
             const inResponseToNodes = xml_1.xpath.selectAttributes(doc, "/*[local-name()='Response']/@InResponseTo");
             if (inResponseToNodes) {
                 inResponseTo = inResponseToNodes.length ? inResponseToNodes[0].nodeValue : null;
@@ -842,7 +823,13 @@ class SAML {
             // the 'InResponseTo' attribute set in the Response
             if (this.mustValidateInResponseTo(Boolean(inResponseTo))) {
                 if (subjectConfirmation) {
+                    if (!subjectConfirmation.$ || subjectConfirmation.$.Method !== "urn:oasis:names:tc:SAML:2.0:cm:bearer") {
+                        throw new Error("Attribute 'urn:oasis:names:tc:SAML:2.0:cm:bearer' missing in SubjectConfirmation.");
+                    }
                     if (confirmData === null || confirmData === void 0 ? void 0 : confirmData.$) {
+                        if (this.getCallbackUrl() !== confirmData.$.Recipient) {
+                            throw new Error("Recipient attribute does not match service provider URL.")
+                        }
                         const subjectInResponseTo = confirmData.$.InResponseTo;
                         if (inResponseTo && subjectInResponseTo && subjectInResponseTo != inResponseTo) {
                             await this.cacheProvider.removeAsync(inResponseTo);
